import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import * as abi from "/utils/buymeacoffee.json"
import { ethers } from "ethers"
import { useEffect, useState } from 'react'


// import {  } from "module";
// import * as dotenv from 'dotenv';
// dotenv.config();
export default function Home() {
  // console.log(process.env.CONTRACT_ADDRESS);
  const address = process.env.CONTRACT_ADDRESS
  const contract_abi = abi.abi;
  // console.log(contract_abi);
  const [currentAccount, setCurrentAccount] = useState(null)
  const [name, setName] = useState(null)
  const [message, setMessage] = useState(null)
  const [memos, setMemos] = useState([])
  const [connected, setConnected] = useState(false)
  const isWalletConnected = async()=>{
    try {
      const {ethereum} = window;
      if(!ethereum){
        console.log("Make sure you have metamask");
        // return false;
      }
      else {
        const accounts = await ethereum.request({
          method: "eth_requestAccounts"
        })
        if(accounts.length !== 0){
          console.log("Connected");
          setConnected(true)
          // return true;

        }
        else{
          console.log("Not Connected");
        }
        // setCurrentAccount(accounts[0])
      }
    } catch (error) {
      console.log(error);
    }
  }
  const connectWallet = async()=>{
    try {
      const {ethereum} = window;
      if(!ethereum){
        alert("Get metamask")
        return;
      }
      const accounts = await ethereum.request({
        method: "eth_requestAccounts"
      })
      console.log("Connected", accounts[0]);
      setCurrentAccount(accounts[0])
      setConnected(true)
    } catch (error) {
      console.log(error);
    }
  }
  const buyCoffee = async()=>{
    try {
      const {ethereum} = window;
      if(!ethereum){
        console.log("Make sure you have metamask");
        return;
      }
      else {
        const provider = new ethers.providers.Web3Provider(ethereum,"any");
        const signer = provider.getSigner();
        const contract = new ethers.Contract(address, contract_abi, signer);
        console.log(contract);
        const transaction = await contract.buycoffee(name?name:"Unknown",message?message:"Enjoy Your Coffee",{value: ethers.utils.parseEther("0.001")});
        await transaction.wait();
        console.log(`${currentAccount} has bought a coffee`);
      }
    } catch (error) {
      console.log(error);
    }
  }
  const getMemos = async()=>{
    try {
      const {ethereum} = window;
      if(ethereum){
        const provider = new ethers.providers.Web3Provider(ethereum,"any");
        const signer = provider.getSigner();
        const contract = new ethers.Contract(address, contract_abi, signer);
        const memos = await contract.getMemos();
        console.log(memos);
        setMemos(memos)
      }
    } catch (error) {
      console.log(error);
    }
  }
  useEffect(() => {
    let buyMeaCoffee;
    isWalletConnected()
    getMemos()
    const onNewMemo =(from,timestamp,name,message)=>{
      console.log(memos);
      setMemos((prevState)=>[
        ...prevState,
        {
          address:from,
         timestamp:new Date(timestamp * 1000),
          message,
          name
        }
      ])
      console.log(memos);
}
const {ethereum} = window;

if(ethereum){
  const provider = new ethers.providers.Web3Provider(ethereum,"any")
  const signer = provider.getSigner();
  buyMeaCoffee= new ethers.Contract(
    address,
    contract_abi,
    signer
  )
  buyMeaCoffee.on("NewMemo",)
}
  return(()=>{
    if(buyMeaCoffee)
    buyMeaCoffee.off("NewMemo",onNewMemo)
  })

  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Buy Me a Coffee</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {/* {
          address && 
          <h1>
            {address}
          </h1>
        } */}
        {
          connected &&
          <button onClick={connectWallet}>Connect Wallet</button>
        }
        <button onClick={buyCoffee}>Buy Coffee</button>
        {
          memos &&
          memos.map((e)=>{
            console.log(e);
            // return(
            //   <h1>{e}</h1>
            // )
          })
        }
      <h1 className='text-red-900'>jdvurnvunrv</h1>
      </main>
    </div>
  )
}
